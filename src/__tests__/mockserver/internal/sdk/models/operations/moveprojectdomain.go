// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type MoveProjectDomainRequestBody struct {
	// The unique target project identifier
	ProjectID string `json:"projectId"`
}

func (o *MoveProjectDomainRequestBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type MoveProjectDomainRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The project domain name
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                       `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *MoveProjectDomainRequestBody `request:"mediaType=application/json"`
}

func (o *MoveProjectDomainRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *MoveProjectDomainRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *MoveProjectDomainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *MoveProjectDomainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *MoveProjectDomainRequest) GetRequestBody() *MoveProjectDomainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// MoveProjectDomainVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type MoveProjectDomainVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *MoveProjectDomainVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *MoveProjectDomainVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *MoveProjectDomainVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *MoveProjectDomainVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// MoveProjectDomainResponseBody - The domain was updated successfuly
type MoveProjectDomainResponseBody struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []MoveProjectDomainVerification `json:"verification,omitempty"`
}

func (o *MoveProjectDomainResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MoveProjectDomainResponseBody) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *MoveProjectDomainResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *MoveProjectDomainResponseBody) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *MoveProjectDomainResponseBody) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *MoveProjectDomainResponseBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *MoveProjectDomainResponseBody) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *MoveProjectDomainResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *MoveProjectDomainResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *MoveProjectDomainResponseBody) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *MoveProjectDomainResponseBody) GetVerification() []MoveProjectDomainVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

type MoveProjectDomainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The domain was updated successfuly
	Object *MoveProjectDomainResponseBody
}

func (o *MoveProjectDomainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *MoveProjectDomainResponse) GetObject() *MoveProjectDomainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
